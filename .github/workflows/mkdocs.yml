name: mkdocs
on:
  push:
    branches:
      - master
      - main

env:
  PAGES_DOMAIN: s.hilberg.eu
  GH_BRANCH: gh-pages
  PAGES_REPO_PATH: 'pages'
  TEX_REPO_PATH: 'tex'

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # - name: Checkout Repo
      #   uses: actions/checkout@v4
      #   with:
      #     path: ${{ env.PAGES_REPO_PATH }}

      # - name: Checkout TEX Repo
      #   uses: actions/checkout@v4
      #   with:
      #     path: ${{ env.TEX_REPO_PATH }}
      #     repository: ${{ secrets.GITEA_REPO_SKRIPTE }}
      #     ssh-user: ${{ secrets.GITEA_REPO_SKRIPTE_USER }}
      #     persist-credentials: ${{ secrets.GITEA_REPO_SKRIPTE_TOKEN }}
      #     token: ${{ secrets.GITEA_REPO_SKRIPTE_TOKEN }}
      #     ref: 'pipeline'

      - name: Checkout TEX Repo
        run: |
          /usr/bin/git clone https://${{ secrets.GITEA_REPO_SKRIPTE_USER }}:${{ secrets.GITEA_REPO_SKRIPTE_TOKEN }}@${{ secrets.GITEA_REPO_SKRIPTE_SERVER }}/${{ secrets.GITEA_REPO_SKRIPTE }} ${{ env.TEX_REPO_PATH }}
          /usr/bin/git config --global --add safe.directory ${{ env.TEX_REPO_PATH }}
          cd ${{ env.TEX_REPO_PATH }}
          /usr/bin/git checkout pipeline

      - name: "Install pip"
        working-directory: ${{ env.TEX_REPO_PATH }}
        run: |
          pip install -r requirements.txt

      - name: "Generate templates"
        working-directory: ${{ env.TEX_REPO_PATH }}
        run: |
          sudo apt-get install pandoc -y
          python main.py --render --ref $GITHUB_SHA

      - name: Compile Full LaTeX document
        uses: xu-cheng/latex-action@v3
        with:
          root_file: skript.tex
          working_directory: ${{ env.TEX_REPO_PATH }}/latex
          args: '-pdf -file-line-error -halt-on-error -interaction=nonstopmode -jobname=skript'

      - name: Upload LaTeX artifact
        uses: actions/upload-artifact@v2
        with:
          name: compiled-latex
          path: ${{ env.TEX_REPO_PATH }}/latex/skript.pdf

  #     - name: Generate Latex pipeline file
  #       run: |
  #         ./generate_latex_pipeline_doc.sh
  #       shell: bash

  #     - name: Compile Lite LaTeX document
  #       uses: xu-cheng/latex-action@v3
  #       with:
  #         root_file: notentransparenz.tex
  #         working_directory: ./docs/files/tex
  #         args: '-pdf -file-line-error -halt-on-error -interaction=nonstopmode -jobname=nt'

  #     - name: Configure Git Credentials
  #       run: |
  #         git config user.name github-actions[bot]
  #         git config user.email 47271687+tna76874@users.noreply.github.com

  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #     - run: |
  #         echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV

  #     - uses: actions/cache@v4
  #       with:
  #         key: mkdocs-material-${{ env.cache_id }}
  #         path: .cache
  #         restore-keys: |
  #           mkdocs-material-
  #     - run: |
  #         pip install -r requirements_docs.txt
  #     - run: |
  #         bash deploy.sh -b ${GH_BRANCH}

  # ensure-cname:
  #   needs: deploy
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout-Code
  #     uses: actions/checkout@v4
  #     with:
  #       ref: ${{env.GH_BRANCH}}
  #       fetch-depth: 0

  #   - name: Configure Git Credentials
  #     run: |
  #       git config user.name "github-actions[bot]"
  #       git config user.email "47271687+tna76874@users.noreply.github.com"

  #   - name: Check CNAME
  #     run: |
  #       if [ -f CNAME ]; then
  #         if [ "$(cat CNAME)" != "${PAGES_DOMAIN}" ]; then
  #           echo "${PAGES_DOMAIN}" > CNAME
  #           git add CNAME
  #           git commit -m "Update CNAME"
  #           git push
  #         fi
  #       else
  #         echo "${PAGES_DOMAIN}" > CNAME
  #         git add CNAME
  #           git commit -m "Add CNAME"
  #         git push
  #       fi